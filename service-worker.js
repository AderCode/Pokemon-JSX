"use strict";var precacheConfig=[["/Pokemon-JSX/index.html","26c48b08f90c3b32527fac7684bceee7"],["/Pokemon-JSX/static/css/main.7db0a3c0.css","7664867fc169f8e54306e00fc4b0126e"],["/Pokemon-JSX/static/js/main.d9e8260c.js","829b778df35e390685765f1ee5013a28"],["/Pokemon-JSX/static/media/128-battle_vs_gym_leader_.cfef1e7a.ogg","cfef1e7af55aab7149a13a1985999beb"],["/Pokemon-JSX/static/media/128_battle__vs_gym_leader_.ed9b3b57.webm","ed9b3b57d383090a35167a3e8d406f7d"],["/Pokemon-JSX/static/media/129-victory_vs_gym_leader_.882945ba.ogg","882945baabf1ee5d84bd1c9685149abb"],["/Pokemon-JSX/static/media/145-ending.d07ab537.ogg","d07ab5377a4cdd2d69aa96246b5a6627"],["/Pokemon-JSX/static/media/300-Menu_Select.09a50a46.ogg","09a50a46210e91186f4bde6eb9faa2ba"],["/Pokemon-JSX/static/media/300-Menu_Select.be47e2ec.mp3","be47e2ec4684ed5ba7381c4333773d41"],["/Pokemon-JSX/static/media/301-damage-sfx.f77eb4b8.ogg","f77eb4b8e577e8da48fc9ca9c1fe9505"],["/Pokemon-JSX/static/media/covalence.9296c53c.png","9296c53c4889c5651e1cac1a6f643c82"],["/Pokemon-JSX/static/media/headshot-pixel-bw.34308924.gif","34308924f5cfa6105ba4ad11e39fb99c"],["/Pokemon-JSX/static/media/player.33c53daa.png","33c53daabdfb8af2c5004b2641b107b9"],["/Pokemon-JSX/static/media/player_sprite.83ec1628.png","83ec1628df28cf7486e80f638c0da44e"],["/Pokemon-JSX/static/media/pokemon_gb.831e1f4d.ttf","831e1f4da157d96bc996f8c9f5f1e578"],["/Pokemon-JSX/static/media/pokemon_unown_gb.a3f96d89.ttf","a3f96d89a238b0d12daa30f257dedcb0"],["/Pokemon-JSX/static/media/professor_sprite.73fc8e50.png","73fc8e50242353ce90e5fa94bcf2bfc2"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})}):Promise.resolve(e)},createCacheKey=function(e,t,a,n){var r=new URL(e);return n&&r.pathname.match(n)||(r.search+=(r.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),r.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),r=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),r]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var n=new Request(a,{credentials:"same-origin"});return fetch(n).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),n="index.html";(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),t=urlsToCacheKeys.has(a));var r="/Pokemon-JSX/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL(r,self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});